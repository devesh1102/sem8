//
// Generated by Bluespec Compiler, version 2017.04.beta1 (build 35065, 2017-04-17)
//
// On Mon Feb 17 18:26:18 IST 2020
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1
// result                         O    32 reg
// RDY_result                     O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// start_m1                       I    16
// start_m2                       I    16
// EN_start                       I     1
// EN_result                      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMult2(CLK,
	       RST_N,

	       start_m1,
	       start_m2,
	       EN_start,
	       RDY_start,

	       EN_result,
	       result,
	       RDY_result);
  input  CLK;
  input  RST_N;

  // action method start
  input  [15 : 0] start_m1;
  input  [15 : 0] start_m2;
  input  EN_start;
  output RDY_start;

  // actionvalue method result
  input  EN_result;
  output [31 : 0] result;
  output RDY_result;

  // signals for module outputs
  wire [31 : 0] result;
  wire RDY_result, RDY_start;

  // register available
  reg available;
  wire available$D_IN, available$EN;

  // register mcand
  reg [16 : 0] mcand;
  wire [16 : 0] mcand$D_IN;
  wire mcand$EN;

  // register mplr
  reg [31 : 0] mplr;
  wire [31 : 0] mplr$D_IN;
  wire mplr$EN;

  // register product
  reg [31 : 0] product;
  wire [31 : 0] product$D_IN;
  wire product$EN;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_mplr$write_1__VAL_1,
		MUX_mplr$write_1__VAL_2,
		MUX_product$write_1__VAL_1;
  wire [16 : 0] MUX_mcand$write_1__VAL_1, MUX_mcand$write_1__VAL_2;

  // remaining internal signals
  reg [31 : 0] tmp__h176;
  wire [31 : 0] NEG_mplr_0___d19, x__h287;

  // action method start
  assign RDY_start = mcand == 17'd0 && available ;

  // actionvalue method result
  assign result = product ;
  assign RDY_result = mcand == 17'd0 && !available ;

  // inputs to muxes for submodule ports
  assign MUX_mcand$write_1__VAL_1 = { 2'd0, mcand[16:2] } ;
  assign MUX_mcand$write_1__VAL_2 = { start_m2, 1'b0 } ;
  assign MUX_mplr$write_1__VAL_1 = { 16'd0, start_m1 } ;
  assign MUX_mplr$write_1__VAL_2 = { mplr[29:0], 2'd0 } ;
  assign MUX_product$write_1__VAL_1 = product + tmp__h176 ;

  // register available
  assign available$D_IN = !EN_start ;
  assign available$EN = EN_start || EN_result ;

  // register mcand
  assign mcand$D_IN =
	     (mcand != 17'd0) ?
	       MUX_mcand$write_1__VAL_1 :
	       MUX_mcand$write_1__VAL_2 ;
  assign mcand$EN = mcand != 17'd0 || EN_start ;

  // register mplr
  assign mplr$D_IN =
	     EN_start ? MUX_mplr$write_1__VAL_1 : MUX_mplr$write_1__VAL_2 ;
  assign mplr$EN = EN_start || mcand != 17'd0 ;

  // register product
  assign product$D_IN =
	     (mcand != 17'd0) ? MUX_product$write_1__VAL_1 : 32'd0 ;
  assign product$EN = mcand != 17'd0 || EN_start ;

  // remaining internal signals
  assign NEG_mplr_0___d19 = -mplr ;
  assign x__h287 = { mplr[30:0], 1'd0 } ;
  always@(mcand or mplr or x__h287 or NEG_mplr_0___d19)
  begin
    case (mcand[2:0])
      3'd0, 3'd7: tmp__h176 = 32'd0;
      3'd1, 3'd2: tmp__h176 = mplr;
      3'd3: tmp__h176 = x__h287;
      3'd4: tmp__h176 = -x__h287;
      3'd5, 3'd6: tmp__h176 = NEG_mplr_0___d19;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK or negedge RST_N )
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        available <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mcand <= `BSV_ASSIGNMENT_DELAY 17'd0;
	mplr <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
	product <= `BSV_ASSIGNMENT_DELAY 32'hAAAAAAAA;
      end
    else
      begin
        if (available$EN) available <= `BSV_ASSIGNMENT_DELAY available$D_IN;
	if (mcand$EN) mcand <= `BSV_ASSIGNMENT_DELAY mcand$D_IN;
	if (mplr$EN) mplr <= `BSV_ASSIGNMENT_DELAY mplr$D_IN;
	if (product$EN) product <= `BSV_ASSIGNMENT_DELAY product$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    available = 1'h0;
    mcand = 17'h0AAAA;
    mplr = 32'hAAAAAAAA;
    product = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkMult2

